/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface BidCoreInterface extends utils.Interface {
  functions: {
    "BID_SHARE_TO_PARTICIPATE()": FunctionFragment;
    "CANCELLED()": FunctionFragment;
    "FINISHED()": FunctionFragment;
    "IN_DEVELOPMENT()": FunctionFragment;
    "IN_DISPUTE()": FunctionFragment;
    "IN_DISPUTE_DISTRIBUTION()": FunctionFragment;
    "WAITING_BID()": FunctionFragment;
    "cancelBid(uint256,uint256)": FunctionFragment;
    "createBid(uint256)": FunctionFragment;
    "getBidById(uint256)": FunctionFragment;
    "getBidIdByProposalIdAndIndex(uint256,uint256)": FunctionFragment;
    "getBidIdByUserAndIndex(address,uint256)": FunctionFragment;
    "getCountOfBids()": FunctionFragment;
    "getCountOfBidsByProposalId(uint256)": FunctionFragment;
    "getCountOfBidsByUser(address)": FunctionFragment;
    "getSelectedBidIdByProposalId(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "selectBid(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPayment(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BID_SHARE_TO_PARTICIPATE"
      | "CANCELLED"
      | "FINISHED"
      | "IN_DEVELOPMENT"
      | "IN_DISPUTE"
      | "IN_DISPUTE_DISTRIBUTION"
      | "WAITING_BID"
      | "cancelBid"
      | "createBid"
      | "getBidById"
      | "getBidIdByProposalIdAndIndex"
      | "getBidIdByUserAndIndex"
      | "getCountOfBids"
      | "getCountOfBidsByProposalId"
      | "getCountOfBidsByUser"
      | "getSelectedBidIdByProposalId"
      | "owner"
      | "renounceOwnership"
      | "selectBid"
      | "transferOwnership"
      | "transferPayment"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BID_SHARE_TO_PARTICIPATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CANCELLED", values?: undefined): string;
  encodeFunctionData(functionFragment: "FINISHED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "IN_DEVELOPMENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IN_DISPUTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IN_DISPUTE_DISTRIBUTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WAITING_BID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidIdByProposalIdAndIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidIdByUserAndIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountOfBids",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCountOfBidsByProposalId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountOfBidsByUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSelectedBidIdByProposalId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectBid",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPayment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BID_SHARE_TO_PARTICIPATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CANCELLED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FINISHED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IN_DEVELOPMENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "IN_DISPUTE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IN_DISPUTE_DISTRIBUTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WAITING_BID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBidById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBidIdByProposalIdAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidIdByUserAndIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountOfBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountOfBidsByProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountOfBidsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSelectedBidIdByProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "selectBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPayment",
    data: BytesLike
  ): Result;

  events: {
    "Cancelled(uint256,uint256,address)": EventFragment;
    "Created(uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Selected(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Selected"): EventFragment;
}

export interface CancelledEventObject {
  id: BigNumber;
  proposalId: BigNumber;
  bidderAddress: string;
}
export type CancelledEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  CancelledEventObject
>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface CreatedEventObject {
  id: BigNumber;
  proposalId: BigNumber;
  bidderAddress: string;
}
export type CreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  CreatedEventObject
>;

export type CreatedEventFilter = TypedEventFilter<CreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SelectedEventObject {
  id: BigNumber;
  proposalId: BigNumber;
  bidderAddress: string;
}
export type SelectedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  SelectedEventObject
>;

export type SelectedEventFilter = TypedEventFilter<SelectedEvent>;

export interface BidCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BidCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BID_SHARE_TO_PARTICIPATE(overrides?: CallOverrides): Promise<[number]>;

    CANCELLED(overrides?: CallOverrides): Promise<[string]>;

    FINISHED(overrides?: CallOverrides): Promise<[string]>;

    IN_DEVELOPMENT(overrides?: CallOverrides): Promise<[string]>;

    IN_DISPUTE(overrides?: CallOverrides): Promise<[string]>;

    IN_DISPUTE_DISTRIBUTION(overrides?: CallOverrides): Promise<[string]>;

    WAITING_BID(overrides?: CallOverrides): Promise<[string]>;

    cancelBid(
      proposalId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBid(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBidById(
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, BigNumber, BigNumber] & {
        proposalId: BigNumber;
        bidderAddress: string;
        isCancelled: boolean;
        bidPaidAmount: BigNumber;
        createdAt: BigNumber;
      }
    >;

    getBidIdByProposalIdAndIndex(
      proposalId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBidIdByUserAndIndex(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCountOfBids(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCountOfBidsByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCountOfBidsByUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSelectedBidIdByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selectBid(
      proposalId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferPayment(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BID_SHARE_TO_PARTICIPATE(overrides?: CallOverrides): Promise<number>;

  CANCELLED(overrides?: CallOverrides): Promise<string>;

  FINISHED(overrides?: CallOverrides): Promise<string>;

  IN_DEVELOPMENT(overrides?: CallOverrides): Promise<string>;

  IN_DISPUTE(overrides?: CallOverrides): Promise<string>;

  IN_DISPUTE_DISTRIBUTION(overrides?: CallOverrides): Promise<string>;

  WAITING_BID(overrides?: CallOverrides): Promise<string>;

  cancelBid(
    proposalId: PromiseOrValue<BigNumberish>,
    bidId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBid(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBidById(
    bidId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean, BigNumber, BigNumber] & {
      proposalId: BigNumber;
      bidderAddress: string;
      isCancelled: boolean;
      bidPaidAmount: BigNumber;
      createdAt: BigNumber;
    }
  >;

  getBidIdByProposalIdAndIndex(
    proposalId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBidIdByUserAndIndex(
    userAddress: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCountOfBids(overrides?: CallOverrides): Promise<BigNumber>;

  getCountOfBidsByProposalId(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCountOfBidsByUser(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSelectedBidIdByProposalId(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selectBid(
    proposalId: PromiseOrValue<BigNumberish>,
    bidId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferPayment(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BID_SHARE_TO_PARTICIPATE(overrides?: CallOverrides): Promise<number>;

    CANCELLED(overrides?: CallOverrides): Promise<string>;

    FINISHED(overrides?: CallOverrides): Promise<string>;

    IN_DEVELOPMENT(overrides?: CallOverrides): Promise<string>;

    IN_DISPUTE(overrides?: CallOverrides): Promise<string>;

    IN_DISPUTE_DISTRIBUTION(overrides?: CallOverrides): Promise<string>;

    WAITING_BID(overrides?: CallOverrides): Promise<string>;

    cancelBid(
      proposalId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBidById(
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, BigNumber, BigNumber] & {
        proposalId: BigNumber;
        bidderAddress: string;
        isCancelled: boolean;
        bidPaidAmount: BigNumber;
        createdAt: BigNumber;
      }
    >;

    getBidIdByProposalIdAndIndex(
      proposalId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidIdByUserAndIndex(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountOfBids(overrides?: CallOverrides): Promise<BigNumber>;

    getCountOfBidsByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountOfBidsByUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSelectedBidIdByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    selectBid(
      proposalId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPayment(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Cancelled(uint256,uint256,address)"(
      id?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      bidderAddress?: PromiseOrValue<string> | null
    ): CancelledEventFilter;
    Cancelled(
      id?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      bidderAddress?: PromiseOrValue<string> | null
    ): CancelledEventFilter;

    "Created(uint256,uint256,address)"(
      id?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      bidderAddress?: PromiseOrValue<string> | null
    ): CreatedEventFilter;
    Created(
      id?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      bidderAddress?: PromiseOrValue<string> | null
    ): CreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Selected(uint256,uint256,address)"(
      id?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      bidderAddress?: PromiseOrValue<string> | null
    ): SelectedEventFilter;
    Selected(
      id?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      bidderAddress?: PromiseOrValue<string> | null
    ): SelectedEventFilter;
  };

  estimateGas: {
    BID_SHARE_TO_PARTICIPATE(overrides?: CallOverrides): Promise<BigNumber>;

    CANCELLED(overrides?: CallOverrides): Promise<BigNumber>;

    FINISHED(overrides?: CallOverrides): Promise<BigNumber>;

    IN_DEVELOPMENT(overrides?: CallOverrides): Promise<BigNumber>;

    IN_DISPUTE(overrides?: CallOverrides): Promise<BigNumber>;

    IN_DISPUTE_DISTRIBUTION(overrides?: CallOverrides): Promise<BigNumber>;

    WAITING_BID(overrides?: CallOverrides): Promise<BigNumber>;

    cancelBid(
      proposalId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBid(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBidById(
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidIdByProposalIdAndIndex(
      proposalId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidIdByUserAndIndex(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountOfBids(overrides?: CallOverrides): Promise<BigNumber>;

    getCountOfBidsByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountOfBidsByUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSelectedBidIdByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selectBid(
      proposalId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferPayment(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BID_SHARE_TO_PARTICIPATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CANCELLED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FINISHED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IN_DEVELOPMENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IN_DISPUTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IN_DISPUTE_DISTRIBUTION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WAITING_BID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelBid(
      proposalId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBidById(
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidIdByProposalIdAndIndex(
      proposalId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidIdByUserAndIndex(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCountOfBids(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCountOfBidsByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCountOfBidsByUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSelectedBidIdByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selectBid(
      proposalId: PromiseOrValue<BigNumberish>,
      bidId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferPayment(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
