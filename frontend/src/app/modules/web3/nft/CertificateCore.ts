/* Autogenerated file. Do not edit manually. */
import { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export type CreateCertificateBatchStruct = {
  name: string;
  course: string;
  emittedAt: BigNumberish;
  workloadInMinutes: BigNumberish;
};

export type CreateCertificateBatchStructOutput = [
                                                   string,
                                                   string,
                                                   BigNumber,
                                                   BigNumber
                                                 ] & {
                                                   name: string;
                                                   course: string;
                                                   emittedAt: BigNumber;
                                                   workloadInMinutes: BigNumber;
                                                 };

export type SetLazyTokenURIBatchStruct = {
  certificateId: BigNumberish;
  tokenURI: string;
};

export type SetLazyTokenURIBatchStructOutput = [BigNumber, string] & {
  certificateId: BigNumber;
  tokenURI: string;
};

export interface CertificateCoreInterface extends utils.Interface {
  functions: {
    'REVOKED_STATUS()': FunctionFragment;
    'VALID_STATUS()': FunctionFragment;
    'WAITING_APPROVATION_STATUS()': FunctionFragment;
    'WAITING_CONFIGURATION_STATUS()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'approveCertificate(uint256)': FunctionFragment;
    'approveToRevoke(uint256,string)': FunctionFragment;
    'approveToTransfer(uint256,address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'batchApproveCertificate(uint256[],uint256)': FunctionFragment;
    'batchCreateCertificate((string,string,uint64,uint64)[],uint256)': FunctionFragment;
    'batchSetLazyTokenURI((uint256,string)[],uint256)': FunctionFragment;
    'canEveryoneMint()': FunctionFragment;
    'canTransferAsManager(uint256)': FunctionFragment;
    'createCertificate(string,string,uint64,uint64,uint256)': FunctionFragment;
    'getApprovationToMintCertificateByManager(uint256,address)': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getCertificateById(uint256)': FunctionFragment;
    'getCertificateByIndexOfInstitution(uint256,uint256)': FunctionFragment;
    'getCountOfCertificatesByInstitution(uint256)': FunctionFragment;
    'getCurrentApprovationsToRevoke(uint256)': FunctionFragment;
    'getCurrentApprovationsToTransfer(uint256,address)': FunctionFragment;
    'getNewContractAddress()': FunctionFragment;
    'getRevokedCertificateReason(uint256,uint256)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isUpgraded()': FunctionFragment;
    'managerAlreadyRequestToRevokeCertificate(uint256,address)': FunctionFragment;
    'managerAlreadyRequestToTransferCertificate(uint256,address)': FunctionFragment;
    'name()': FunctionFragment;
    'onERC721Received(address,address,uint256,bytes)': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'revokeCertificate(uint256)': FunctionFragment;
    'revokeCertificateAsOwner(uint256,string)': FunctionFragment;
    'revokeCertificateWithEarlyStatus(uint256,string)': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setLazyTokenURI(uint256,string)': FunctionFragment;
    'setShouldEnableMintToEveryone(bool)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenByIndex(uint256)': FunctionFragment;
    'tokenOfOwnerByIndex(address,uint256)': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferAsManager(uint256,address)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'upgrade(address)': FunctionFragment;
  };
  events: {
    'AddedApprovationToRevoke(uint256,string,address,uint256)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'Approved(uint256,address,uint256)': EventFragment;
    'ContractUpgraded(address)': EventFragment;
    'Created(uint256,string,string,uint64,uint64,bytes32,uint256,uint32)': EventFragment;
    'InstitutionUpdated(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'Revoked(uint256,string,string,uint64,uint64,bytes32,uint256,uint32)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Valid(uint256,uint256)': EventFragment;
    'WaitingConfiguration(uint256,uint256)': EventFragment;
  };

  encodeFunctionData(
    functionFragment: 'REVOKED_STATUS',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'VALID_STATUS',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'WAITING_APPROVATION_STATUS',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'WAITING_CONFIGURATION_STATUS',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'approveCertificate',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'approveToRevoke',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'approveToTransfer',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;

  encodeFunctionData(
    functionFragment: 'batchApproveCertificate',
    values: [BigNumberish[], BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'batchCreateCertificate',
    values: [CreateCertificateBatchStruct[], BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'batchSetLazyTokenURI',
    values: [SetLazyTokenURIBatchStruct[], BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'canEveryoneMint',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'canTransferAsManager',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'createCertificate',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'getApprovationToMintCertificateByManager',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'getApproved',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'getCertificateById',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'getCertificateByIndexOfInstitution',
    values: [BigNumberish, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'getCountOfCertificatesByInstitution',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'getCurrentApprovationsToRevoke',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'getCurrentApprovationsToTransfer',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'getNewContractAddress',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'getRevokedCertificateReason',
    values: [BigNumberish, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'isUpgraded',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'managerAlreadyRequestToRevokeCertificate',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'managerAlreadyRequestToTransferCertificate',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(functionFragment: 'name', values?: undefined): string;

  encodeFunctionData(
    functionFragment: 'onERC721Received',
    values: [string, string, BigNumberish, BytesLike],
  ): string;

  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;

  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;

  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;

  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'revokeCertificate',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'revokeCertificateAsOwner',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'revokeCertificateWithEarlyStatus',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean],
  ): string;

  encodeFunctionData(
    functionFragment: 'setLazyTokenURI',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'setShouldEnableMintToEveryone',
    values: [boolean],
  ): string;

  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string;

  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;

  encodeFunctionData(
    functionFragment: 'tokenByIndex',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'tokenOfOwnerByIndex',
    values: [string, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'transferAsManager',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;

  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

  encodeFunctionData(functionFragment: 'upgrade', values: [string]): string;

  decodeFunctionResult(
    functionFragment: 'REVOKED_STATUS',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'VALID_STATUS',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'WAITING_APPROVATION_STATUS',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'WAITING_CONFIGURATION_STATUS',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'approveCertificate',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'approveToRevoke',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'approveToTransfer',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'batchApproveCertificate',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'batchCreateCertificate',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'batchSetLazyTokenURI',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'canEveryoneMint',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'canTransferAsManager',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'createCertificate',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getApprovationToMintCertificateByManager',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getApproved',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getCertificateById',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getCertificateByIndexOfInstitution',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getCountOfCertificatesByInstitution',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getCurrentApprovationsToRevoke',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getCurrentApprovationsToTransfer',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getNewContractAddress',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getRevokedCertificateReason',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'isUpgraded', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'managerAlreadyRequestToRevokeCertificate',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'managerAlreadyRequestToTransferCertificate',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'onERC721Received',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'revokeCertificate',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'revokeCertificateAsOwner',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'revokeCertificateWithEarlyStatus',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'setLazyTokenURI',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'setShouldEnableMintToEveryone',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'tokenByIndex',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'tokenOfOwnerByIndex',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'transferAsManager',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'upgrade', data: BytesLike): Result;

  getEvent(nameOrSignatureOrTopic: 'AddedApprovationToRevoke'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Approved'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'ContractUpgraded'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Created'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'InstitutionUpdated'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Revoked'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Valid'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'WaitingConfiguration'): EventFragment;
}

export type AddedApprovationToRevokeEvent = TypedEvent<[BigNumber, string, string, BigNumber],
  {
    certificateId: BigNumber;
    reason: string;
    revoker: string;
    institutionId: BigNumber;
  }>;

export type AddedApprovationToRevokeEventFilter =
  TypedEventFilter<AddedApprovationToRevokeEvent>;

export type ApprovalEvent = TypedEvent<[string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<[string, string, boolean],
  { owner: string; operator: string; approved: boolean }>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type ApprovedEvent = TypedEvent<[BigNumber, string, BigNumber],
  { id: BigNumber; manager: string; institutionId: BigNumber }>;

export type ApprovedEventFilter = TypedEventFilter<ApprovedEvent>;

export type ContractUpgradedEvent = TypedEvent<[string],
  { newContractAddress: string }>;

export type ContractUpgradedEventFilter =
  TypedEventFilter<ContractUpgradedEvent>;

export type CreatedEvent = TypedEvent<[BigNumber, string, string, BigNumber, BigNumber, string, BigNumber, number],
  {
    id: BigNumber;
    name: string;
    course: string;
    emittedAt: BigNumber;
    workloadInMinutes: BigNumber;
    status: string;
    institutionId: BigNumber;
    approvations: number;
  }>;

export type CreatedEventFilter = TypedEventFilter<CreatedEvent>;

export type InstitutionUpdatedEvent = TypedEvent<[string],
  { institutionAddressContract: string }>;

export type InstitutionUpdatedEventFilter =
  TypedEventFilter<InstitutionUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string, string],
  { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RevokedEvent = TypedEvent<[BigNumber, string, string, BigNumber, BigNumber, string, BigNumber, number],
  {
    id: BigNumber;
    name: string;
    course: string;
    emittedAt: BigNumber;
    workloadInMinutes: BigNumber;
    status: string;
    institutionId: BigNumber;
    approvations: number;
  }>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export type TransferEvent = TypedEvent<[string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type ValidEvent = TypedEvent<[BigNumber, BigNumber],
  { id: BigNumber; institutionId: BigNumber }>;

export type ValidEventFilter = TypedEventFilter<ValidEvent>;

export type WaitingConfigurationEvent = TypedEvent<[BigNumber, BigNumber],
  { id: BigNumber; institutionId: BigNumber }>;

export type WaitingConfigurationEventFilter =
  TypedEventFilter<WaitingConfigurationEvent>;

export interface CertificateCore extends BaseContract {
  interface: CertificateCoreInterface;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;
  functions: {
    REVOKED_STATUS(overrides?: CallOverrides): Promise<[string]>;

    VALID_STATUS(overrides?: CallOverrides): Promise<[string]>;

    WAITING_APPROVATION_STATUS(overrides?: CallOverrides): Promise<[string]>;

    WAITING_CONFIGURATION_STATUS(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approveCertificate(
      _certificateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approveToRevoke(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approveToTransfer(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    batchApproveCertificate(
      _ids: BigNumberish[],
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    batchCreateCertificate(
      _certificates: CreateCertificateBatchStruct[],
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    batchSetLazyTokenURI(
      _items: SetLazyTokenURIBatchStruct[],
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    canEveryoneMint(overrides?: CallOverrides): Promise<[boolean]>;

    canTransferAsManager(
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    createCertificate(
      _certificateName: string,
      _course: string,
      _emittedAt: BigNumberish,
      _workloadInMinutes: BigNumberish,
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getApprovationToMintCertificateByManager(
      _certificateId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getCertificateById(
      _certificateId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, string, BigNumber, BigNumber, string, BigNumber, number] & {
      name: string;
      course: string;
      emittedAt: BigNumber;
      workloadInMinutes: BigNumber;
      status: string;
      institutionId: BigNumber;
      approvations: number;
    }>;

    getCertificateByIndexOfInstitution(
      _institutionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getCountOfCertificatesByInstitution(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getCurrentApprovationsToRevoke(
      _certificateId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[number]>;

    getCurrentApprovationsToTransfer(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getNewContractAddress(overrides?: CallOverrides): Promise<[string]>;

    getRevokedCertificateReason(
      _certificateId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { reason: string; revoker: string }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isUpgraded(overrides?: CallOverrides): Promise<[boolean]>;

    managerAlreadyRequestToRevokeCertificate(
      _certificateId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    managerAlreadyRequestToTransferCertificate(
      _tokenId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeCertificate(
      _certificateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeCertificateAsOwner(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeCertificateWithEarlyStatus(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLazyTokenURI(
      _tokenId: BigNumberish,
      _strTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setShouldEnableMintToEveryone(
      _shouldEnableMintToEveryone: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferAsManager(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgrade(
      _newContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };
  callStatic: {
    REVOKED_STATUS(overrides?: CallOverrides): Promise<string>;

    VALID_STATUS(overrides?: CallOverrides): Promise<string>;

    WAITING_APPROVATION_STATUS(overrides?: CallOverrides): Promise<string>;

    WAITING_CONFIGURATION_STATUS(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    approveCertificate(
      _certificateId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    approveToRevoke(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    approveToTransfer(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchApproveCertificate(
      _ids: BigNumberish[],
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    batchCreateCertificate(
      _certificates: CreateCertificateBatchStruct[],
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    batchSetLazyTokenURI(
      _items: SetLazyTokenURIBatchStruct[],
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    canEveryoneMint(overrides?: CallOverrides): Promise<boolean>;

    canTransferAsManager(
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    createCertificate(
      _certificateName: string,
      _course: string,
      _emittedAt: BigNumberish,
      _workloadInMinutes: BigNumberish,
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getApprovationToMintCertificateByManager(
      _certificateId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getCertificateById(
      _certificateId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, string, BigNumber, BigNumber, string, BigNumber, number] & {
      name: string;
      course: string;
      emittedAt: BigNumber;
      workloadInMinutes: BigNumber;
      status: string;
      institutionId: BigNumber;
      approvations: number;
    }>;

    getCertificateByIndexOfInstitution(
      _institutionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCountOfCertificatesByInstitution(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCurrentApprovationsToRevoke(
      _certificateId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<number>;

    getCurrentApprovationsToTransfer(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNewContractAddress(overrides?: CallOverrides): Promise<string>;

    getRevokedCertificateReason(
      _certificateId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { reason: string; revoker: string }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isUpgraded(overrides?: CallOverrides): Promise<boolean>;

    managerAlreadyRequestToRevokeCertificate(
      _certificateId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    managerAlreadyRequestToTransferCertificate(
      _tokenId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeCertificate(
      _certificateId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeCertificateAsOwner(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    revokeCertificateWithEarlyStatus(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setLazyTokenURI(
      _tokenId: BigNumberish,
      _strTokenURI: string,
      overrides?: CallOverrides,
    ): Promise<string>;

    setShouldEnableMintToEveryone(
      _shouldEnableMintToEveryone: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferAsManager(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgrade(
      _newContractAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };
  filters: {
    'AddedApprovationToRevoke(uint256,string,address,uint256)'(
      certificateId?: BigNumberish | null,
      reason?: null,
      revoker?: string | null,
      institutionId?: BigNumberish | null,
    ): AddedApprovationToRevokeEventFilter;
    AddedApprovationToRevoke(
      certificateId?: BigNumberish | null,
      reason?: null,
      revoker?: string | null,
      institutionId?: BigNumberish | null,
    ): AddedApprovationToRevokeEventFilter;

    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'Approved(uint256,address,uint256)'(
      id?: BigNumberish | null,
      manager?: string | null,
      institutionId?: BigNumberish | null,
    ): ApprovedEventFilter;
    Approved(
      id?: BigNumberish | null,
      manager?: string | null,
      institutionId?: BigNumberish | null,
    ): ApprovedEventFilter;

    'ContractUpgraded(address)'(
      newContractAddress?: null,
    ): ContractUpgradedEventFilter;
    ContractUpgraded(newContractAddress?: null): ContractUpgradedEventFilter;

    'Created(uint256,string,string,uint64,uint64,bytes32,uint256,uint32)'(
      id?: null,
      name?: null,
      course?: null,
      emittedAt?: null,
      workloadInMinutes?: null,
      status?: BytesLike | null,
      institutionId?: BigNumberish | null,
      approvations?: null,
    ): CreatedEventFilter;
    Created(
      id?: null,
      name?: null,
      course?: null,
      emittedAt?: null,
      workloadInMinutes?: null,
      status?: BytesLike | null,
      institutionId?: BigNumberish | null,
      approvations?: null,
    ): CreatedEventFilter;

    'InstitutionUpdated(address)'(
      institutionAddressContract?: null,
    ): InstitutionUpdatedEventFilter;
    InstitutionUpdated(
      institutionAddressContract?: null,
    ): InstitutionUpdatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Revoked(uint256,string,string,uint64,uint64,bytes32,uint256,uint32)'(
      id?: null,
      name?: null,
      course?: null,
      emittedAt?: null,
      workloadInMinutes?: null,
      status?: null,
      institutionId?: BigNumberish | null,
      approvations?: null,
    ): RevokedEventFilter;
    Revoked(
      id?: null,
      name?: null,
      course?: null,
      emittedAt?: null,
      workloadInMinutes?: null,
      status?: null,
      institutionId?: BigNumberish | null,
      approvations?: null,
    ): RevokedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Valid(uint256,uint256)'(
      id?: null,
      institutionId?: BigNumberish | null,
    ): ValidEventFilter;
    Valid(id?: null, institutionId?: BigNumberish | null): ValidEventFilter;

    'WaitingConfiguration(uint256,uint256)'(
      id?: null,
      institutionId?: BigNumberish | null,
    ): WaitingConfigurationEventFilter;
    WaitingConfiguration(
      id?: null,
      institutionId?: BigNumberish | null,
    ): WaitingConfigurationEventFilter;
  };
  estimateGas: {
    REVOKED_STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    VALID_STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    WAITING_APPROVATION_STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    WAITING_CONFIGURATION_STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approveCertificate(
      _certificateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approveToRevoke(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approveToTransfer(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchApproveCertificate(
      _ids: BigNumberish[],
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    batchCreateCertificate(
      _certificates: CreateCertificateBatchStruct[],
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    batchSetLazyTokenURI(
      _items: SetLazyTokenURIBatchStruct[],
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    canEveryoneMint(overrides?: CallOverrides): Promise<BigNumber>;

    canTransferAsManager(
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    createCertificate(
      _certificateName: string,
      _course: string,
      _emittedAt: BigNumberish,
      _workloadInMinutes: BigNumberish,
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getApprovationToMintCertificateByManager(
      _certificateId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCertificateById(
      _certificateId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCertificateByIndexOfInstitution(
      _institutionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCountOfCertificatesByInstitution(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCurrentApprovationsToRevoke(
      _certificateId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCurrentApprovationsToTransfer(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNewContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRevokedCertificateReason(
      _certificateId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isUpgraded(overrides?: CallOverrides): Promise<BigNumber>;

    managerAlreadyRequestToRevokeCertificate(
      _certificateId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    managerAlreadyRequestToTransferCertificate(
      _tokenId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeCertificate(
      _certificateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeCertificateAsOwner(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeCertificateWithEarlyStatus(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLazyTokenURI(
      _tokenId: BigNumberish,
      _strTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setShouldEnableMintToEveryone(
      _shouldEnableMintToEveryone: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferAsManager(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgrade(
      _newContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };
  populateTransaction: {
    REVOKED_STATUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VALID_STATUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WAITING_APPROVATION_STATUS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    WAITING_CONFIGURATION_STATUS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approveCertificate(
      _certificateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approveToRevoke(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approveToTransfer(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    batchApproveCertificate(
      _ids: BigNumberish[],
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    batchCreateCertificate(
      _certificates: CreateCertificateBatchStruct[],
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    batchSetLazyTokenURI(
      _items: SetLazyTokenURIBatchStruct[],
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    canEveryoneMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canTransferAsManager(
      _tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    createCertificate(
      _certificateName: string,
      _course: string,
      _emittedAt: BigNumberish,
      _workloadInMinutes: BigNumberish,
      _institutionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getApprovationToMintCertificateByManager(
      _certificateId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCertificateById(
      _certificateId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCertificateByIndexOfInstitution(
      _institutionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCountOfCertificatesByInstitution(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCurrentApprovationsToRevoke(
      _certificateId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCurrentApprovationsToTransfer(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNewContractAddress(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getRevokedCertificateReason(
      _certificateId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isUpgraded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerAlreadyRequestToRevokeCertificate(
      _certificateId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    managerAlreadyRequestToTransferCertificate(
      _tokenId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeCertificate(
      _certificateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeCertificateAsOwner(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeCertificateWithEarlyStatus(
      _certificateId: BigNumberish,
      _reason: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLazyTokenURI(
      _tokenId: BigNumberish,
      _strTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setShouldEnableMintToEveryone(
      _shouldEnableMintToEveryone: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAsManager(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgrade(
      _newContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };

  connect(signerOrProvider: Signer | Provider | string): this;

  attach(addressOrName: string): this;

  deployed(): Promise<this>;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;

  listeners(eventName?: string): Array<Listener>;

  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;

  removeAllListeners(eventName?: string): this;

  REVOKED_STATUS(overrides?: CallOverrides): Promise<string>;

  VALID_STATUS(overrides?: CallOverrides): Promise<string>;

  WAITING_APPROVATION_STATUS(overrides?: CallOverrides): Promise<string>;

  WAITING_CONFIGURATION_STATUS(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approveCertificate(
    _certificateId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approveToRevoke(
    _certificateId: BigNumberish,
    _reason: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approveToTransfer(
    _tokenId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  batchApproveCertificate(
    _ids: BigNumberish[],
    _institutionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  batchCreateCertificate(
    _certificates: CreateCertificateBatchStruct[],
    _institutionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  batchSetLazyTokenURI(
    _items: SetLazyTokenURIBatchStruct[],
    _institutionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  canEveryoneMint(overrides?: CallOverrides): Promise<boolean>;

  canTransferAsManager(
    _tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  createCertificate(
    _certificateName: string,
    _course: string,
    _emittedAt: BigNumberish,
    _workloadInMinutes: BigNumberish,
    _institutionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getApprovationToMintCertificateByManager(
    _certificateId: BigNumberish,
    _manager: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getCertificateById(
    _certificateId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[string, string, BigNumber, BigNumber, string, BigNumber, number] & {
    name: string;
    course: string;
    emittedAt: BigNumber;
    workloadInMinutes: BigNumber;
    status: string;
    institutionId: BigNumber;
    approvations: number;
  }>;

  getCertificateByIndexOfInstitution(
    _institutionId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getCountOfCertificatesByInstitution(
    _institutionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getCurrentApprovationsToRevoke(
    _certificateId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<number>;

  getCurrentApprovationsToTransfer(
    _tokenId: BigNumberish,
    _to: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getNewContractAddress(overrides?: CallOverrides): Promise<string>;

  getRevokedCertificateReason(
    _certificateId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[string, string] & { reason: string; revoker: string }>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isUpgraded(overrides?: CallOverrides): Promise<boolean>;

  managerAlreadyRequestToRevokeCertificate(
    _certificateId: BigNumberish,
    _manager: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  managerAlreadyRequestToTransferCertificate(
    _tokenId: BigNumberish,
    _manager: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeCertificate(
    _certificateId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeCertificateAsOwner(
    _certificateId: BigNumberish,
    _reason: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeCertificateWithEarlyStatus(
    _certificateId: BigNumberish,
    _reason: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLazyTokenURI(
    _tokenId: BigNumberish,
    _strTokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setShouldEnableMintToEveryone(
    _shouldEnableMintToEveryone: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferAsManager(
    _tokenId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgrade(
    _newContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;
}
