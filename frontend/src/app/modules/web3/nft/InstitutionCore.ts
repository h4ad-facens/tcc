/* Autogenerated file. Do not edit manually. */
import { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from './common';

export interface InstitutionCoreInterface extends utils.Interface {
  functions: {
    'addManagerToInstitution(uint256,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'canEveryoneMint()': FunctionFragment;
    'createInstitution(string,string,uint64,string,string,uint256,uint256,uint256)': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getInstitutionById(uint256)': FunctionFragment;
    'getNewContractAddress()': FunctionFragment;
    'institutionBalanceOf(uint256)': FunctionFragment;
    'intitutionOfManagerByIndex(address,uint256)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'isManagerOf(uint256,address)': FunctionFragment;
    'isUpgraded()': FunctionFragment;
    'managerBalanceOf(address)': FunctionFragment;
    'managerOfInstitutionByIndex(uint256,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'removeManagerFromInstitution(uint256,address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setApprovationsToMint(uint256,uint256)': FunctionFragment;
    'setApprovationsToRevoke(uint256,uint256)': FunctionFragment;
    'setApprovationsToTransfer(uint256,uint256)': FunctionFragment;
    'setCertificateMetadataUrl(uint256,string)': FunctionFragment;
    'setName(uint256,string)': FunctionFragment;
    'setShouldEnableMintToEveryone(bool)': FunctionFragment;
    'setUrl(uint256,string)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenByIndex(uint256)': FunctionFragment;
    'tokenOfOwnerByIndex(address,uint256)': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'upgrade(address)': FunctionFragment;
  };
  events: {
    'AddedManager(uint256,address)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'ContractUpgraded(address)': EventFragment;
    'Created(uint256,string,uint64,uint64,string,string,uint8,uint8,uint8)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'RemovedManager(uint256,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Updated(uint256,string,uint64,uint64,string,string,uint8,uint8,uint8)': EventFragment;
  };

  encodeFunctionData(
    functionFragment: 'addManagerToInstitution',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish],
  ): string;

  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;

  encodeFunctionData(
    functionFragment: 'canEveryoneMint',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'createInstitution',
    values: [
      string,
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
  ): string;

  encodeFunctionData(
    functionFragment: 'getApproved',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'getInstitutionById',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'getNewContractAddress',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'institutionBalanceOf',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'intitutionOfManagerByIndex',
    values: [string, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [string, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'isManagerOf',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'isUpgraded',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'managerBalanceOf',
    values: [string],
  ): string;

  encodeFunctionData(
    functionFragment: 'managerOfInstitutionByIndex',
    values: [BigNumberish, BigNumberish],
  ): string;

  encodeFunctionData(functionFragment: 'name', values?: undefined): string;

  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;

  encodeFunctionData(
    functionFragment: 'ownerOf',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;

  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;

  encodeFunctionData(
    functionFragment: 'removeManagerFromInstitution',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [string, string, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [string, boolean],
  ): string;

  encodeFunctionData(
    functionFragment: 'setApprovationsToMint',
    values: [BigNumberish, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'setApprovationsToRevoke',
    values: [BigNumberish, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'setApprovationsToTransfer',
    values: [BigNumberish, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'setCertificateMetadataUrl',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'setName',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'setShouldEnableMintToEveryone',
    values: [boolean],
  ): string;

  encodeFunctionData(
    functionFragment: 'setUrl',
    values: [BigNumberish, string],
  ): string;

  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike],
  ): string;

  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;

  encodeFunctionData(
    functionFragment: 'tokenByIndex',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'tokenOfOwnerByIndex',
    values: [string, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'tokenURI',
    values: [BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish],
  ): string;

  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;

  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

  encodeFunctionData(functionFragment: 'upgrade', values: [string]): string;

  decodeFunctionResult(
    functionFragment: 'addManagerToInstitution',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'canEveryoneMint',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'createInstitution',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getApproved',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getInstitutionById',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getNewContractAddress',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'institutionBalanceOf',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'intitutionOfManagerByIndex',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'isManagerOf',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'isUpgraded', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'managerBalanceOf',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'managerOfInstitutionByIndex',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'removeManagerFromInstitution',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'setApprovationsToMint',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'setApprovationsToRevoke',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'setApprovationsToTransfer',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'setCertificateMetadataUrl',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'setName', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'setShouldEnableMintToEveryone',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'setUrl', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'tokenByIndex',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'tokenOfOwnerByIndex',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'upgrade', data: BytesLike): Result;

  getEvent(nameOrSignatureOrTopic: 'AddedManager'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'ContractUpgraded'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Created'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'RemovedManager'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'Updated'): EventFragment;
}

export type AddedManagerEvent = TypedEvent<[BigNumber, string],
  { institutionId: BigNumber; manager: string }>;

export type AddedManagerEventFilter = TypedEventFilter<AddedManagerEvent>;

export type ApprovalEvent = TypedEvent<[string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<[string, string, boolean],
  { owner: string; operator: string; approved: boolean }>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type ContractUpgradedEvent = TypedEvent<[string],
  { newContractAddress: string }>;

export type ContractUpgradedEventFilter =
  TypedEventFilter<ContractUpgradedEvent>;

export type CreatedEvent = TypedEvent<[
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  number,
  number,
  number
],
  {
    id: BigNumber;
    name: string;
    foundedAt: BigNumber;
    createdAt: BigNumber;
    url: string;
    certificateMetadataUrl: string;
    approvationsToMint: number;
    approvationsToRevoke: number;
    approvationsToTransfer: number;
  }>;

export type CreatedEventFilter = TypedEventFilter<CreatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<[string, string],
  { previousOwner: string; newOwner: string }>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RemovedManagerEvent = TypedEvent<[BigNumber, string],
  { institutionId: BigNumber; manager: string }>;

export type RemovedManagerEventFilter = TypedEventFilter<RemovedManagerEvent>;

export type TransferEvent = TypedEvent<[string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpdatedEvent = TypedEvent<[
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  number,
  number,
  number
],
  {
    id: BigNumber;
    name: string;
    foundedAt: BigNumber;
    createdAt: BigNumber;
    url: string;
    certificateMetadataUrl: string;
    approvationsToMint: number;
    approvationsToRevoke: number;
    approvationsToTransfer: number;
  }>;

export type UpdatedEventFilter = TypedEventFilter<UpdatedEvent>;

export interface InstitutionCore extends BaseContract {
  interface: InstitutionCoreInterface;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;
  functions: {
    addManagerToInstitution(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    canEveryoneMint(overrides?: CallOverrides): Promise<[boolean]>;

    createInstitution(
      _tokenURI: string,
      _institutionName: string,
      _foundedAt: BigNumberish,
      _url: string,
      _certificateMetadataUrl: string,
      _approvationsToMint: BigNumberish,
      _approvationsToRevoke: BigNumberish,
      _approvationsToTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getInstitutionById(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber, BigNumber, string, string, number, number, number] & {
      name: string;
      foundedAt: BigNumber;
      createdAt: BigNumber;
      url: string;
      certificateMetadataUrl: string;
      approvationsToMint: number;
      approvationsToRevoke: number;
      approvationsToTransfer: number;
    }>;

    getNewContractAddress(overrides?: CallOverrides): Promise<[string]>;

    institutionBalanceOf(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    intitutionOfManagerByIndex(
      _manager: string,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isManagerOf(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isUpgraded(overrides?: CallOverrides): Promise<[boolean]>;

    managerBalanceOf(
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    managerOfInstitutionByIndex(
      _institutionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeManagerFromInstitution(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovationsToMint(
      _institutionId: BigNumberish,
      _approvationsToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovationsToRevoke(
      _institutionId: BigNumberish,
      _approvationsToRevoke: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setApprovationsToTransfer(
      _institutionId: BigNumberish,
      _approvationsToTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCertificateMetadataUrl(
      _institutionId: BigNumberish,
      _certificateMetadataUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setName(
      _institutionId: BigNumberish,
      _institutionName: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setShouldEnableMintToEveryone(
      _shouldEnableMintToEveryone: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setUrl(
      _institutionId: BigNumberish,
      _url: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgrade(
      _newContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };
  callStatic: {
    addManagerToInstitution(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    canEveryoneMint(overrides?: CallOverrides): Promise<boolean>;

    createInstitution(
      _tokenURI: string,
      _institutionName: string,
      _foundedAt: BigNumberish,
      _url: string,
      _certificateMetadataUrl: string,
      _approvationsToMint: BigNumberish,
      _approvationsToRevoke: BigNumberish,
      _approvationsToTransfer: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getInstitutionById(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string, BigNumber, BigNumber, string, string, number, number, number] & {
      name: string;
      foundedAt: BigNumber;
      createdAt: BigNumber;
      url: string;
      certificateMetadataUrl: string;
      approvationsToMint: number;
      approvationsToRevoke: number;
      approvationsToTransfer: number;
    }>;

    getNewContractAddress(overrides?: CallOverrides): Promise<string>;

    institutionBalanceOf(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    intitutionOfManagerByIndex(
      _manager: string,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isManagerOf(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isUpgraded(overrides?: CallOverrides): Promise<boolean>;

    managerBalanceOf(
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    managerOfInstitutionByIndex(
      _institutionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeManagerFromInstitution(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovationsToMint(
      _institutionId: BigNumberish,
      _approvationsToMint: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovationsToRevoke(
      _institutionId: BigNumberish,
      _approvationsToRevoke: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setApprovationsToTransfer(
      _institutionId: BigNumberish,
      _approvationsToTransfer: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCertificateMetadataUrl(
      _institutionId: BigNumberish,
      _certificateMetadataUrl: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setName(
      _institutionId: BigNumberish,
      _institutionName: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setShouldEnableMintToEveryone(
      _shouldEnableMintToEveryone: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setUrl(
      _institutionId: BigNumberish,
      _url: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgrade(
      _newContractAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };
  filters: {
    'AddedManager(uint256,address)'(
      institutionId?: BigNumberish | null,
      manager?: string | null,
    ): AddedManagerEventFilter;
    AddedManager(
      institutionId?: BigNumberish | null,
      manager?: string | null,
    ): AddedManagerEventFilter;

    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null,
    ): ApprovalEventFilter;

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null,
    ): ApprovalForAllEventFilter;

    'ContractUpgraded(address)'(
      newContractAddress?: null,
    ): ContractUpgradedEventFilter;
    ContractUpgraded(newContractAddress?: null): ContractUpgradedEventFilter;

    'Created(uint256,string,uint64,uint64,string,string,uint8,uint8,uint8)'(
      id?: null,
      name?: null,
      foundedAt?: null,
      createdAt?: null,
      url?: null,
      certificateMetadataUrl?: null,
      approvationsToMint?: null,
      approvationsToRevoke?: null,
      approvationsToTransfer?: null,
    ): CreatedEventFilter;
    Created(
      id?: null,
      name?: null,
      foundedAt?: null,
      createdAt?: null,
      url?: null,
      certificateMetadataUrl?: null,
      approvationsToMint?: null,
      approvationsToRevoke?: null,
      approvationsToTransfer?: null,
    ): CreatedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RemovedManager(uint256,address)'(
      institutionId?: BigNumberish | null,
      manager?: string | null,
    ): RemovedManagerEventFilter;
    RemovedManager(
      institutionId?: BigNumberish | null,
      manager?: string | null,
    ): RemovedManagerEventFilter;

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null,
    ): TransferEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Updated(uint256,string,uint64,uint64,string,string,uint8,uint8,uint8)'(
      id?: null,
      name?: null,
      foundedAt?: null,
      createdAt?: null,
      url?: null,
      certificateMetadataUrl?: null,
      approvationsToMint?: null,
      approvationsToRevoke?: null,
      approvationsToTransfer?: null,
    ): UpdatedEventFilter;
    Updated(
      id?: null,
      name?: null,
      foundedAt?: null,
      createdAt?: null,
      url?: null,
      certificateMetadataUrl?: null,
      approvationsToMint?: null,
      approvationsToRevoke?: null,
      approvationsToTransfer?: null,
    ): UpdatedEventFilter;
  };
  estimateGas: {
    addManagerToInstitution(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    canEveryoneMint(overrides?: CallOverrides): Promise<BigNumber>;

    createInstitution(
      _tokenURI: string,
      _institutionName: string,
      _foundedAt: BigNumberish,
      _url: string,
      _certificateMetadataUrl: string,
      _approvationsToMint: BigNumberish,
      _approvationsToRevoke: BigNumberish,
      _approvationsToTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getInstitutionById(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getNewContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    institutionBalanceOf(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    intitutionOfManagerByIndex(
      _manager: string,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isManagerOf(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isUpgraded(overrides?: CallOverrides): Promise<BigNumber>;

    managerBalanceOf(
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    managerOfInstitutionByIndex(
      _institutionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeManagerFromInstitution(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovationsToMint(
      _institutionId: BigNumberish,
      _approvationsToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovationsToRevoke(
      _institutionId: BigNumberish,
      _approvationsToRevoke: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setApprovationsToTransfer(
      _institutionId: BigNumberish,
      _approvationsToTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCertificateMetadataUrl(
      _institutionId: BigNumberish,
      _certificateMetadataUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setName(
      _institutionId: BigNumberish,
      _institutionName: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setShouldEnableMintToEveryone(
      _shouldEnableMintToEveryone: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setUrl(
      _institutionId: BigNumberish,
      _url: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgrade(
      _newContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };
  populateTransaction: {
    addManagerToInstitution(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    canEveryoneMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createInstitution(
      _tokenURI: string,
      _institutionName: string,
      _foundedAt: BigNumberish,
      _url: string,
      _certificateMetadataUrl: string,
      _approvationsToMint: BigNumberish,
      _approvationsToRevoke: BigNumberish,
      _approvationsToTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getInstitutionById(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getNewContractAddress(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    institutionBalanceOf(
      _institutionId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    intitutionOfManagerByIndex(
      _manager: string,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isManagerOf(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isUpgraded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerBalanceOf(
      _manager: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    managerOfInstitutionByIndex(
      _institutionId: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeManagerFromInstitution(
      _institutionId: BigNumberish,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovationsToMint(
      _institutionId: BigNumberish,
      _approvationsToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovationsToRevoke(
      _institutionId: BigNumberish,
      _approvationsToRevoke: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setApprovationsToTransfer(
      _institutionId: BigNumberish,
      _approvationsToTransfer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCertificateMetadataUrl(
      _institutionId: BigNumberish,
      _certificateMetadataUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setName(
      _institutionId: BigNumberish,
      _institutionName: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setShouldEnableMintToEveryone(
      _shouldEnableMintToEveryone: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setUrl(
      _institutionId: BigNumberish,
      _url: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgrade(
      _newContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };

  connect(signerOrProvider: Signer | Provider | string): this;

  attach(addressOrName: string): this;

  deployed(): Promise<this>;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;

  listeners(eventName?: string): Array<Listener>;

  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;

  removeAllListeners(eventName?: string): this;

  addManagerToInstitution(
    _institutionId: BigNumberish,
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  canEveryoneMint(overrides?: CallOverrides): Promise<boolean>;

  createInstitution(
    _tokenURI: string,
    _institutionName: string,
    _foundedAt: BigNumberish,
    _url: string,
    _certificateMetadataUrl: string,
    _approvationsToMint: BigNumberish,
    _approvationsToRevoke: BigNumberish,
    _approvationsToTransfer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getInstitutionById(
    _institutionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[string, BigNumber, BigNumber, string, string, number, number, number] & {
    name: string;
    foundedAt: BigNumber;
    createdAt: BigNumber;
    url: string;
    certificateMetadataUrl: string;
    approvationsToMint: number;
    approvationsToRevoke: number;
    approvationsToTransfer: number;
  }>;

  getNewContractAddress(overrides?: CallOverrides): Promise<string>;

  institutionBalanceOf(
    _institutionId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  intitutionOfManagerByIndex(
    _manager: string,
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isManagerOf(
    _institutionId: BigNumberish,
    _manager: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isUpgraded(overrides?: CallOverrides): Promise<boolean>;

  managerBalanceOf(
    _manager: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  managerOfInstitutionByIndex(
    _institutionId: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeManagerFromInstitution(
    _institutionId: BigNumberish,
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovationsToMint(
    _institutionId: BigNumberish,
    _approvationsToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovationsToRevoke(
    _institutionId: BigNumberish,
    _approvationsToRevoke: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setApprovationsToTransfer(
    _institutionId: BigNumberish,
    _approvationsToTransfer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCertificateMetadataUrl(
    _institutionId: BigNumberish,
    _certificateMetadataUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setName(
    _institutionId: BigNumberish,
    _institutionName: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setShouldEnableMintToEveryone(
    _shouldEnableMintToEveryone: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setUrl(
    _institutionId: BigNumberish,
    _url: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgrade(
    _newContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;
}
