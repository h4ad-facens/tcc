/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
/* eslint-disable */
import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from './common';

export interface DisputeCoreInterface extends utils.Interface {
  functions: {
    'CANCELLED()': FunctionFragment;
    'FINISHED()': FunctionFragment;
    'IN_DEVELOPMENT()': FunctionFragment;
    'IN_DISPUTE()': FunctionFragment;
    'IN_DISPUTE_DISTRIBUTION()': FunctionFragment;
    'WAITING_BID()': FunctionFragment;
    'createDispute(uint256)': FunctionFragment;
    'getCountOfDisputes()': FunctionFragment;
    'getCountOfDisputesByUser(address)': FunctionFragment;
    'getDisputeById(uint256)': FunctionFragment;
    'getDisputeIdByProposalId(uint256)': FunctionFragment;
    'getDisputeIdByUserAddressAndIndex(address,uint256)': FunctionFragment;
    'getPendingSelectedMediatorByUserAddressAndDisputeId(address,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'selectDistribution(uint256,uint8)': FunctionFragment;
    'selectMediator(uint256,address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CANCELLED'
      | 'FINISHED'
      | 'IN_DEVELOPMENT'
      | 'IN_DISPUTE'
      | 'IN_DISPUTE_DISTRIBUTION'
      | 'WAITING_BID'
      | 'createDispute'
      | 'getCountOfDisputes'
      | 'getCountOfDisputesByUser'
      | 'getDisputeById'
      | 'getDisputeIdByProposalId'
      | 'getDisputeIdByUserAddressAndIndex'
      | 'getPendingSelectedMediatorByUserAddressAndDisputeId'
      | 'owner'
      | 'renounceOwnership'
      | 'selectDistribution'
      | 'selectMediator'
      | 'transferOwnership',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CANCELLED', values?: undefined): string;

  encodeFunctionData(functionFragment: 'FINISHED', values?: undefined): string;

  encodeFunctionData(
    functionFragment: 'IN_DEVELOPMENT',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'IN_DISPUTE',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'IN_DISPUTE_DISTRIBUTION',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'WAITING_BID',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'createDispute',
    values: [PromiseOrValue<BigNumberish>],
  ): string;

  encodeFunctionData(
    functionFragment: 'getCountOfDisputes',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'getCountOfDisputesByUser',
    values: [PromiseOrValue<string>],
  ): string;

  encodeFunctionData(
    functionFragment: 'getDisputeById',
    values: [PromiseOrValue<BigNumberish>],
  ): string;

  encodeFunctionData(
    functionFragment: 'getDisputeIdByProposalId',
    values: [PromiseOrValue<BigNumberish>],
  ): string;

  encodeFunctionData(
    functionFragment: 'getDisputeIdByUserAddressAndIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  encodeFunctionData(
    functionFragment: 'getPendingSelectedMediatorByUserAddressAndDisputeId',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;

  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;

  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;

  encodeFunctionData(
    functionFragment: 'selectDistribution',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;

  encodeFunctionData(
    functionFragment: 'selectMediator',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;

  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'CANCELLED', data: BytesLike): Result;

  decodeFunctionResult(functionFragment: 'FINISHED', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'IN_DEVELOPMENT',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'IN_DISPUTE', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'IN_DISPUTE_DISTRIBUTION',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'WAITING_BID',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'createDispute',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getCountOfDisputes',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getCountOfDisputesByUser',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getDisputeById',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getDisputeIdByProposalId',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getDisputeIdByUserAddressAndIndex',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'getPendingSelectedMediatorByUserAddressAndDisputeId',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;

  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'selectDistribution',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'selectMediator',
    data: BytesLike,
  ): Result;

  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;

  events: {
    'Created(uint256,uint256,address,address)': EventFragment;
    'DistribuitionDefined(uint256,uint256)': EventFragment;
    'MediatorSelected(uint256,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Created'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'DistribuitionDefined'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'MediatorSelected'): EventFragment;

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface CreatedEventObject {
  id: BigNumber;
  proposalId: BigNumber;
  proposalCreatorAddress: string;
  bidderAddress: string;
}

export type CreatedEvent = TypedEvent<[BigNumber, BigNumber, string, string],
  CreatedEventObject>;

export type CreatedEventFilter = TypedEventFilter<CreatedEvent>;

export interface DistribuitionDefinedEventObject {
  id: BigNumber;
  proposalId: BigNumber;
}

export type DistribuitionDefinedEvent = TypedEvent<[BigNumber, BigNumber],
  DistribuitionDefinedEventObject>;

export type DistribuitionDefinedEventFilter =
  TypedEventFilter<DistribuitionDefinedEvent>;

export interface MediatorSelectedEventObject {
  id: BigNumber;
  mediatorAddress: string;
}

export type MediatorSelectedEvent = TypedEvent<[BigNumber, string],
  MediatorSelectedEventObject>;

export type MediatorSelectedEventFilter =
  TypedEventFilter<MediatorSelectedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}

export type OwnershipTransferredEvent = TypedEvent<[string, string],
  OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface DisputeCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;

  attach(addressOrName: string): this;

  deployed(): Promise<this>;

  interface: DisputeCoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;

  listeners(eventName?: string): Array<Listener>;

  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;

  removeAllListeners(eventName?: string): this;

  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CANCELLED(overrides?: CallOverrides): Promise<[string]>;

    FINISHED(overrides?: CallOverrides): Promise<[string]>;

    IN_DEVELOPMENT(overrides?: CallOverrides): Promise<[string]>;

    IN_DISPUTE(overrides?: CallOverrides): Promise<[string]>;

    IN_DISPUTE_DISTRIBUTION(overrides?: CallOverrides): Promise<[string]>;

    WAITING_BID(overrides?: CallOverrides): Promise<[string]>;

    createDispute(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getCountOfDisputes(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCountOfDisputesByUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getDisputeById(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[
                 BigNumber,
                 BigNumber,
                 BigNumber,
                 string,
                 string,
                 string,
                 number,
                 boolean,
                 BigNumber
               ] & {
                 proposalId: BigNumber;
                 bidId: BigNumber;
                 createdAt: BigNumber;
                 proposalCreatorAddress: string;
                 bidderAddress: string;
                 mediatorAddress: string;
                 splitBidderShare: number;
                 createdByBidder: boolean;
                 distributedAt: BigNumber;
               }>;

    getDisputeIdByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getDisputeIdByUserAddressAndIndex(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getPendingSelectedMediatorByUserAddressAndDisputeId(
      userAddress: PromiseOrValue<string>,
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    selectDistribution(
      disputeId: PromiseOrValue<BigNumberish>,
      splitBidderShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    selectMediator(
      disputeId: PromiseOrValue<BigNumberish>,
      mediator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  CANCELLED(overrides?: CallOverrides): Promise<string>;

  FINISHED(overrides?: CallOverrides): Promise<string>;

  IN_DEVELOPMENT(overrides?: CallOverrides): Promise<string>;

  IN_DISPUTE(overrides?: CallOverrides): Promise<string>;

  IN_DISPUTE_DISTRIBUTION(overrides?: CallOverrides): Promise<string>;

  WAITING_BID(overrides?: CallOverrides): Promise<string>;

  createDispute(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getCountOfDisputes(overrides?: CallOverrides): Promise<BigNumber>;

  getCountOfDisputesByUser(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getDisputeById(
    disputeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[
               BigNumber,
               BigNumber,
               BigNumber,
               string,
               string,
               string,
               number,
               boolean,
               BigNumber
             ] & {
               proposalId: BigNumber;
               bidId: BigNumber;
               createdAt: BigNumber;
               proposalCreatorAddress: string;
               bidderAddress: string;
               mediatorAddress: string;
               splitBidderShare: number;
               createdByBidder: boolean;
               distributedAt: BigNumber;
             }>;

  getDisputeIdByProposalId(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getDisputeIdByUserAddressAndIndex(
    userAddress: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getPendingSelectedMediatorByUserAddressAndDisputeId(
    userAddress: PromiseOrValue<string>,
    disputeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  selectDistribution(
    disputeId: PromiseOrValue<BigNumberish>,
    splitBidderShare: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  selectMediator(
    disputeId: PromiseOrValue<BigNumberish>,
    mediator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    CANCELLED(overrides?: CallOverrides): Promise<string>;

    FINISHED(overrides?: CallOverrides): Promise<string>;

    IN_DEVELOPMENT(overrides?: CallOverrides): Promise<string>;

    IN_DISPUTE(overrides?: CallOverrides): Promise<string>;

    IN_DISPUTE_DISTRIBUTION(overrides?: CallOverrides): Promise<string>;

    WAITING_BID(overrides?: CallOverrides): Promise<string>;

    createDispute(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCountOfDisputes(overrides?: CallOverrides): Promise<BigNumber>;

    getCountOfDisputesByUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDisputeById(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[
                 BigNumber,
                 BigNumber,
                 BigNumber,
                 string,
                 string,
                 string,
                 number,
                 boolean,
                 BigNumber
               ] & {
                 proposalId: BigNumber;
                 bidId: BigNumber;
                 createdAt: BigNumber;
                 proposalCreatorAddress: string;
                 bidderAddress: string;
                 mediatorAddress: string;
                 splitBidderShare: number;
                 createdByBidder: boolean;
                 distributedAt: BigNumber;
               }>;

    getDisputeIdByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDisputeIdByUserAddressAndIndex(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPendingSelectedMediatorByUserAddressAndDisputeId(
      userAddress: PromiseOrValue<string>,
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    selectDistribution(
      disputeId: PromiseOrValue<BigNumberish>,
      splitBidderShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    selectMediator(
      disputeId: PromiseOrValue<BigNumberish>,
      mediator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Created(uint256,uint256,address,address)'(
      id?: null,
      proposalId?: null,
      proposalCreatorAddress?: PromiseOrValue<string> | null,
      bidderAddress?: PromiseOrValue<string> | null,
    ): CreatedEventFilter;
    Created(
      id?: null,
      proposalId?: null,
      proposalCreatorAddress?: PromiseOrValue<string> | null,
      bidderAddress?: PromiseOrValue<string> | null,
    ): CreatedEventFilter;

    'DistribuitionDefined(uint256,uint256)'(
      id?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
    ): DistribuitionDefinedEventFilter;
    DistribuitionDefined(
      id?: null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
    ): DistribuitionDefinedEventFilter;

    'MediatorSelected(uint256,address)'(
      id?: null,
      mediatorAddress?: PromiseOrValue<string> | null,
    ): MediatorSelectedEventFilter;
    MediatorSelected(
      id?: null,
      mediatorAddress?: PromiseOrValue<string> | null,
    ): MediatorSelectedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    CANCELLED(overrides?: CallOverrides): Promise<BigNumber>;

    FINISHED(overrides?: CallOverrides): Promise<BigNumber>;

    IN_DEVELOPMENT(overrides?: CallOverrides): Promise<BigNumber>;

    IN_DISPUTE(overrides?: CallOverrides): Promise<BigNumber>;

    IN_DISPUTE_DISTRIBUTION(overrides?: CallOverrides): Promise<BigNumber>;

    WAITING_BID(overrides?: CallOverrides): Promise<BigNumber>;

    createDispute(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getCountOfDisputes(overrides?: CallOverrides): Promise<BigNumber>;

    getCountOfDisputesByUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDisputeById(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDisputeIdByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDisputeIdByUserAddressAndIndex(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getPendingSelectedMediatorByUserAddressAndDisputeId(
      userAddress: PromiseOrValue<string>,
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    selectDistribution(
      disputeId: PromiseOrValue<BigNumberish>,
      splitBidderShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    selectMediator(
      disputeId: PromiseOrValue<BigNumberish>,
      mediator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CANCELLED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FINISHED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IN_DEVELOPMENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IN_DISPUTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IN_DISPUTE_DISTRIBUTION(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    WAITING_BID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createDispute(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getCountOfDisputes(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCountOfDisputesByUser(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDisputeById(
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDisputeIdByProposalId(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDisputeIdByUserAddressAndIndex(
      userAddress: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getPendingSelectedMediatorByUserAddressAndDisputeId(
      userAddress: PromiseOrValue<string>,
      disputeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    selectDistribution(
      disputeId: PromiseOrValue<BigNumberish>,
      splitBidderShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    selectMediator(
      disputeId: PromiseOrValue<BigNumberish>,
      mediator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
